"""init database

Revision ID: 0316d94af553
Revises:
Create Date: 2023-02-06 23:07:20.404296

"""
import uuid

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "0316d94af553"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "parking_addresses",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("street", sa.String(length=100), nullable=False),
        sa.Column("zip_code", sa.String(length=20), nullable=False),
        sa.Column("city", sa.String(length=100), nullable=False),
        sa.Column("country", sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    permissions_table = op.create_table(
        "permissions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.Column("description", sa.String(length=1000), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    roles_table = op.create_table(
        "roles",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "parkings",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("address_id", sa.UUID(), nullable=True),
        sa.Column("owner_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["address_id"], ["parking_addresses.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["owner_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    roles_permissions_table = op.create_table(
        "roles_permissions",
        sa.Column("role_id", sa.UUID(), nullable=False),
        sa.Column("permission_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("role_id", "permission_id"),
    )
    op.create_table(
        "users_roles",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("role_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], onupdate="CASCADE", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "role_id"),
    )
    op.create_table(
        "parking_spaces",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("parking_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["parking_id"], ["parkings.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###

    permissions = {
        "app:use": {"id": uuid.uuid4(), "name": "app:use", "description": None},
        "me:read": {"id": uuid.uuid4(), "name": "me:read", "description": None},
        "me:update": {"id": uuid.uuid4(), "name": "me:update", "description": None},
        "me:delete": {"id": uuid.uuid4(), "name": "me:delete", "description": None},
        "user:read": {"id": uuid.uuid4(), "name": "user:read", "description": None},
        "user:delete": {"id": uuid.uuid4(), "name": "user:delete", "description": None},
        "user:update": {"id": uuid.uuid4(), "name": "user:update", "description": None},
        "user:create": {"id": uuid.uuid4(), "name": "user:create", "description": None},
    }
    roles = {
        "user": {"id": uuid.uuid4(), "name": "user", "description": None},
        "admin": {"id": uuid.uuid4(), "name": "admin", "description": None},
    }

    roles_permissions = [
        {"role_id": roles["user"]["id"], "permission_id": permissions["app:use"]["id"]},
        {"role_id": roles["user"]["id"], "permission_id": permissions["me:read"]["id"]},
        {"role_id": roles["user"]["id"], "permission_id": permissions["me:delete"]["id"]},
        {"role_id": roles["user"]["id"], "permission_id": permissions["me:update"]["id"]},
    ]

    # add all permissions to admin
    roles_permissions.extend(
        [
            {"role_id": roles["admin"]["id"], "permission_id": permission["id"]}
            for permission in permissions.values()
        ]
    )

    op.bulk_insert(permissions_table, list(permissions.values()))
    op.bulk_insert(roles_table, list(roles.values()))
    op.bulk_insert(roles_permissions_table, roles_permissions)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("parking_spaces")
    op.drop_table("users_roles")
    op.drop_table("roles_permissions")
    op.drop_table("parkings")
    op.drop_table("users")
    op.drop_table("roles")
    op.drop_table("permissions")
    op.drop_table("parking_addresses")
    # ### end Alembic commands ###
