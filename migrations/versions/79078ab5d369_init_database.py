"""init database

Revision ID: 79078ab5d369
Revises:
Create Date: 2023-01-29 10:23:10.827550

"""
from alembic import op
import sqlalchemy as sa
import uuid


# revision identifiers, used by Alembic.
revision = "79078ab5d369"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "parkings",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    permissions_table = op.create_table(
        "permissions",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.Column("description", sa.String(length=1000), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    roles_table = op.create_table(
        "roles",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    roles_permissions_table = op.create_table(
        "roles_permissions",
        sa.Column("role_id", sa.String(), nullable=True),
        sa.Column("permission_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
    )
    op.create_table(
        "users_roles",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("role_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "role_id"),
    )
    # ### end Alembic commands ###

    permissions = {
        "app:use": {"id": str(uuid.uuid4()), "name": "app:use", "description": None},
        "me:read": {"id": str(uuid.uuid4()), "name": "me:read", "description": None},
        "me:update": {"id": str(uuid.uuid4()), "name": "me:update", "description": None},
        "me:delete": {"id": str(uuid.uuid4()), "name": "me:delete", "description": None},
        "user:read": {"id": str(uuid.uuid4()), "name": "user:read", "description": None},
        "user:delete": {"id": str(uuid.uuid4()), "name": "user:delete", "description": None},
        "user:update": {"id": str(uuid.uuid4()), "name": "user:update", "description": None},
        "user:create": {"id": str(uuid.uuid4()), "name": "user:create", "description": None},
    }
    roles = {
        "user": {"id": str(uuid.uuid4()), "name": "user", "description": None},
        "admin": {"id": str(uuid.uuid4()), "name": "admin", "description": None},
    }

    roles_permissions = [
        {"role_id": roles["user"]["id"], "permission_id": permissions["app:use"]["id"]},
        {"role_id": roles["user"]["id"], "permission_id": permissions["me:read"]["id"]},
        {"role_id": roles["user"]["id"], "permission_id": permissions["me:delete"]["id"]},
        {"role_id": roles["user"]["id"], "permission_id": permissions["me:update"]["id"]},
    ]

    # add all permissions to admin
    roles_permissions.extend(
        [
            {"role_id": roles["admin"]["id"], "permission_id": permission["id"]}
            for permission in permissions.values()
        ]
    )

    op.bulk_insert(permissions_table, list(permissions.values()))
    op.bulk_insert(roles_table, list(roles.values()))
    op.bulk_insert(roles_permissions_table, roles_permissions)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users_roles")
    op.drop_table("roles_permissions")
    op.drop_table("users")
    op.drop_table("roles")
    op.drop_table("permissions")
    op.drop_table("parkings")
    # ### end Alembic commands ###
